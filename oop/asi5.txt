Q1. Write a C++ program for Exception Handling Divide by zero Using C++ Programming.

Program:

#include <iostream>
using namespace std;
int main() 
{
    int x,y;
    cout<<"enter two numbers : ";
    cin>>x>>y;
    try 
    {
        if(y == 0) 
        {
            throw 0;
        }
        cout<<"result : "<<x/y<<endl;
    }
    catch(int e) 
    {
        cout<<"exception caught : division by zero"<< endl;
    }
    return 0;
}






Q2. Write a C++ program to sort an array in ascending order using function template.

Program:

#include<iostream>
using namespace std;
int i,j;
template<typename T>

void sortArray(T arr[],int n) 
{
    for(i=0;i<n-1;i++) 
    {
        for(j=0;j<n-i-1;j++) 
        {
            if(arr[j]>arr[j+1]) 
            {
                T temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}
int main() 
{
    int n;
    int arr[] = {64, 25, 12, 22, 11};
    n = sizeof(arr)/sizeof(arr[0]);
    cout<<"original array : ";
    for(i=0;i<n;i++) 
    {
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    sortArray(arr,n);
    cout << "array in ascending order : ";
    for(i=0;i<n;i++) 
    {
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    return 0;
}






Q3. Write a C++ program to swap a data using function template.

Program:

#include <iostream>
using namespace std;
template<typename T>
void swapNumbers(T &a, T &b)
{
    T temp = a;
    a = b;
    b = temp;
}
int main() 
{
    int x = 5, y = 10;
    cout << "before swapping : x = " << x << ", y = " << y << endl;
    swapNumbers(x, y);
    cout << "after swapping : x = " << x << ", y = " << y << endl;
    return 0;
}






Q4. Write a C++ program to make a simple calculator using class template.

Program:

#include <iostream>
using namespace std;
template <typename T>
class Calculator 
{
    public:
        T add(T a, T b) 
        {
            return a + b;
        }
        T subtract(T a, T b) 
        {
            return a - b;
        }
        T multiply(T a, T b) 
        {
            return a * b;
        }
        T divide(T a, T b) 
        {
            return a / b;
        }
};
int main() 
{
    Calculator <int> intCalc;
    int a = 5, b = 3;
    cout<<"addition : "<<intCalc.add(a, b)<<endl;
    cout<<"subtraction : "<<intCalc.subtract(a, b)<<endl;
    cout <<"multiplication : "<<intCalc.multiply(a, b)<<endl;
    cout<<"division : "<<intCalc.divide(a, b)<<endl;
    return 0;
}





Q5. Write a C++ program implementing stack and itâ€™s operations using template class.

Program:

#include<iostream>
#include<vector>
using namespace std;
template<typename T>
class Stack 
{
    private:
        vector<T> data;
    public:
        void push(T value) 
        {
            data.push_back(value);
        }
        void pop() 
        {
            if (!data.empty()) 
            {
                data.pop_back();
            } else 
            {
                cout<<"Stack is empty"<< endl;
            }
        }
        T top() 
        {
            if (!data.empty()) 
            {
                return data.back();
            } else {
                cout << "Stack is empty" << endl;
                return T();
            }
        }
        bool empty() 
        {
            return data.empty();
        }
        int size() 
        {
            return data.size();
        }
};
int main() 
{
    Stack
    <int> intStack;
    intStack.push(5);
    intStack.push(10);
    intStack.push(15);
    while (!intStack.empty()) 
    {
        cout << intStack.top() << endl;
        intStack.pop();
    }
    return 0;
}






Q6. Write a C++ program implementing linked list & some required operations on it using class template.

Program:

#include <iostream>
using namespace std;
template <typename T>
class Node 
{
    public:
        T data;
        Node *next;
        Node(T data) 
        {
            this->data = data;
            next = nullptr;
        }
};
template <typename T>
class LinkedList 
{
    private:
        Node<T> *head;
    public:
        LinkedList() 
        {
            head = nullptr;
        }
        void insertAtHead(T data) 
        {
            Node<T> *newNode = new Node<T>(data);
            newNode->next = head;
            head = newNode;
        }
        void insertAtTail(T data)
        {
            if (head == nullptr) 
            {
                head = new Node<T>(data);
                return;
            }
            Node<T> *tail = head;
            while (tail->next != nullptr) 
            {
                tail = tail->next;
            }
            tail->next = new Node<T>(data);
        }
        void deleteNode(T data) 
        {
            if (head == nullptr) 
            {
                return;
            }
            if (head->data == data) 
            {
                Node<T> *temp = head;
                head = head->next;
                delete temp;
                return;
            }
            Node<T> *previous = head;
            Node<T> *current = head->next;
            while (current != nullptr && current->data != data)
            {
                previous = current;
                current = current->next;
            }
            if (current != nullptr) 
            {
                previous->next = current->next;
                delete current;
            }
        }
        void display() 
        {
            Node<T> *temp = head;
            while (temp != nullptr) 
            {
                cout << temp->data << " ";
                temp = temp->next;
            }
            cout << endl;
        }
};
int main()
{
    LinkedList <int> intList;
    intList.insertAtHead(5);
    intList.insertAtHead(10);
    intList.insertAtTail(15);
    intList.insertAtTail(20);
    intList.display();
    intList.deleteNode(10);
    intList.display();
    return 0;
}
