Q1. Create a base class shape. Derive two classes as Triangle and Rectangle from the base class shape. Take getdata()
and display_area() as member functions of base class.  Make display_area() as a virtual function and redefine it  in derived classes to suit their requirement. Design a program that will accept dimensions of a triangle or rectangle interactively and display the area.

Program:

#include<iostream>
using namespace std;
class Shape
{
    protected:  
    float height,base;
    public:
    Shape()
    {
        height=0;
        base=0;
    }
    void get_data()
    {
        cout<<"\nenter height and base : ";
        cin>>height>>base;
    }
    void virtual display_area()
    {
    }
};
class Triangle : public Shape
{
    public:
    void display_area()
    {
        cout<<"\narea of triangle : "<<(height*base)/2;
    }
};
class Rectangle : public Shape
{
    public:
    void display_area()
    {
        cout<<"\narea of rectangle = "<<height*base;
    }
};
int main()
{
    Shape *s;
    Triangle t;
    t.get_data();
    s=&t;
    s->display_area();
    Rectangle r;
    r.get_data();
    s=&r;
    s->display_area();
    return 0;
}






Q2. Write a C++ program to demonstrate a pure virtual function which is invoked from the object of derived class through the pointer of the base class. Base class contains getdata() and display(). Display the information of employee using this.

Program:

#include<iostream>
using namespace std;
class Employee
{
    protected:
    char name[20];
    int emp_id,expe;
    float sal;
    public:
    void virtual getdata()
    {
        cout<<"enter employee id : ";
        cin>>emp_id;
        cout<<"\nenter employee name : ";
        cin>>name;
    }
    void virtual putdata()
    {
        cout<<"\nemployee id : "<<emp_id;
        cout<<"\nemployee name : "<<name;
    }
};
class Emp : public Employee
{
    void virtual getdata()
    {
        cout<<"\nenter employee salary : ";
        cin>>sal;
        cout<<"\nenter employee experience : ";
        cin>>expe;
    }
    void virtual putdata()
    {
        cout<<"\nemployee salary : "<<sal;
        cout<<"\nemployee experience : "<<expe;
    }
};
int main()
{
    Employee *ptr;
    Employee e;
    Emp em;
    ptr=&e;
    ptr->getdata();
    ptr->putdata();
    ptr=&em;
    ptr->getdata();
    ptr->putdata();
    return 0;
}





Q3. Consider a book shop which sales books and video tapes.  Define a class Media which store title and price of  a
publication. Create two derive classes book and tape where book class is used to store no of  pages of book and tape
class is used to store playing time of a tape. Use display function in all the classes and show the use of virtual function.

Program:

#include<iostream>
using namespace std;
class Media
{
    protected:
    char title[20];
    float price;
    public:
    void gettitleandprice()
    {
        cout<<"\nenter title : ";
        cin>>title;
        cout<<"\nenter price : ";
        cin>>price;
    }
    void virtual display()
    {
    }
};
class Book : public Media
{
    protected:
    int pg;
    public:
    void getpg()
    {
        cout<<"\nenter total pages in the book : ";
        cin>>pg;
    }
    void display()
    {
        cout<<"\ntitle : "<<title;
        cout<<"\nprice : "<<price;
        cout<<"\ntotal pages : "<<pg;
    }
};
class Tape : public Media
{
    protected:
    int dur;
    public:
    void getdur()
    {
        cout<<"\nenter duration of tape in minutes : ";
        cin>>dur;
    }
    void display()
    {
        cout<<"\ntitle : "<<title;
        cout<<"\nprice : "<<price;
        cout<<"\nduration in minutes : "<<dur;
    }
};
int main()
{
    Media *ptr;
    Media m;
    Book b;
    ptr=&b;
    ptr->gettitleandprice();
    b.getpg();
    ptr->display();
    Tape t;
    ptr=&t;
    ptr->gettitleandprice();
    t.getdur();
    ptr->display();
    return 0;
}






Q4. Write a C++ program to maintain the records of person with details (Name and Age) and find the eldest among them. The program must use this pointer to return the result.

Program:

#include <iostream>
using namespace std;
class Person
{
    protected:
    string name;
    int age;
    public:
    Person(string name, int age) 
    {
        this->name = name;
        this->age = age;
    }
    string getName()
    {
        return name;
    }
    int getAge() 
    {
        return age;
    }
    Person *eldest(Person *other) 
    {
        if (this->age > other->age) 
        {
            return this;
        }
        return other;
    }
};
int main() 
{
    Person person1("tony", 45);
    Person person2("chris", 70);
    Person person3("peter", 25);
    Person *eldest = &person1;
    eldest = eldest->eldest(&person2);
    eldest = eldest->eldest(&person3);
    cout<<"eldest person is : "<<eldest->getName()<<" with age: " <<eldest->getAge();
    return 0;
}







Q5. Create a class ‘Account’ that stores customer name, account number and type of account. From this derive the
classes cur_acct and sav_acct to make them more specific to their requirements. Include necessary member functions in order to achieve the following tasks:

a) Accept deposit from a customer
and update the balance. 
b) Display the balance. 
c) Compute and deposit
interest. 
d)  Permit withdrawal and
update the balance..

Program:

#include<iostream>
#include<math.h>
using namespace std;
class account
{
    public:
    char cust_name[50],type;
    long acc_no,balance;
    void get()
    {
        cout<<"\nenter customer name: ";
        cin>>cust_name;
        cout<<"enter account number:";
        cin>>acc_no;
        cout<<"enter types s for saving and c for current:";
        cin>>type;
        cout<<"enter balance:";
        cin>>balance;
    }
    void display()
    {
        cout<<"\ncustomer Name: "<<cust_name;
        cout<<"\naccount Number: "<<acc_no;
        cout<<"\ntype: "<<type;
        cout<<"\nbalance: "<<balance;
    }
    void deposit()
    {
        int amt;
        cout<<"\nenter the amount which you want to deposit:";
        cin>>amt;
        balance+=amt;
    }
};
class sav_acct:public account
{
    public:
    int intr;
    void comp_intrest()
    {  
        int t1,r1=10;
        intr=balance*pow(1+r1/12,t1);
        cout<<intr;
        balance+=intr;
    }
    void withdraw()
    {
        int amt;
        cout<<"\nenter the amount which do you want to withdraw :";
        cin>>amt;
        if(balance>amt)
        balance-=amt;
        else
        cout<<"\ninsufficient balance";
    }
};
class curr_acct : public account
{
    public:
    void min_bal()
    {
        if(balance<500)
        {
            cout<<"\npenality imposed :\nnew balance is:"<<balance-50;
        }
        else
        {
            cout<<"\nno penalty imposed";
        }
    }
    void withdraw()
    {
        int amt;
        cout<<"\nenter amount to be withdrawn :";
        cin>>amt;
        if(amt>balance)
        {
        cout<<"insufficient balance";
        }
        else
        {
            balance-=amt;
        }
    }
};
int main()
{
    sav_acct s1;
    curr_acct c1;
    c1.get();
    c1.display();
    c1.deposit();
    c1.display();
    c1.withdraw();
    c1.display();
    c1.min_bal();
    s1.get();
    s1.display();
    s1.deposit();
    s1.comp_intrest();
    s1.display();
    s1.withdraw();
    s1.display();
}






