Q1. Implement Stack using Array ADT.

Program:

#include<stdio.h>
int st[10];
int top=-1;
int x,i,data;
void push()
{
    printf("\nenter data : ");
    scanf("%d",&data);
    if(top==9)
    {
        printf("\nstack is full");
    }
    else
    {
        top++;
        st[top]=data;
    }
}
int pop()
{
    if(top==-1)
    {
        printf("\nstack is empty");
    }
    else
    {
        x=st[top];
        top--;
    }
    return x;
}
void display()
{
    for(i=top;i>=0;i--)
    {
        printf("%d\n",st[i]);
    }
}
int main()
{
    int ch;
    printf("\n1.Push Element");
    printf("\n2.Pop Element");
    printf("\n3.Display Stack");
    do
    {
        printf("\nenter your choice : ");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: push();
                    break;
            case 2: printf("deleted element : %d",pop());
                    break;
            case 3: display();
                    break;
            default: printf("\ninvalid choice");
        }
    }while(ch!=0);
    return 0;
}




Q2. Implement Stack using Linked List.

Program:

#include<stdio.h>
#include<stdlib.h>
struct Node
{
    int data;
    struct Node *next;
}*top=NULL;
void push()
{
    struct Node *temp;
    temp=(struct Node *)malloc(sizeof(struct Node));
    printf("\nenter data : ");
    scanf("%d",&temp->data);
    temp->next=NULL;
    if(top==NULL)
    {
        top=temp;
    }
    else
    {
        temp->next=top;
        top=temp;
    }
}
int pop()
{
    struct Node *temp;
    int x;
    temp=top;
    x=temp->data;
    top=temp->next;
    free(temp);
    return x;
}
void display()
{
    struct Node *temp;
    temp=top;
    while(temp!=NULL)
    {
        printf("%d\n",temp->data);
        temp=temp->next;
    }
    printf("\n");
}
int main()
{
    int ch;
    printf("\n1.Push Element");
    printf("\n2.Pop Element");
    printf("\n3.Display Stack");
    do
    {
        printf("\nenter your choice : ");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: push();
                    break;
            case 2: printf("\ndeleted element : %d",pop());
                    break;
            case 3: display();
                    break;
            default: printf("\ninvalid choice");
        }
    }while(ch!=0);
    return 0;
}




Q3. Implement stack as an ADT. Use this ADT to perform expression conversion.(Infix – Postfix) 

Program:
#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<stdlib.h>
#define max 10
char postfix[10];
char infix[10];
int index;
char stack[10];
int top=-1;
void push(char ch)
{
	top++;
	stack[top]=ch;
}
char pop()
{
	char m;
	m=stack[top];
	top--;
	return m;
}
void infixtopostfix(char in[20])
{
	char ch,x,y;
	int i;
	for(i=0;i<strlen(infix);i++)
	{
		ch=in[i];
		switch(ch)
		{
			case '+':
			if(stack[top]=='*'||stack[top]=='/'||stack[top]=='^')
			{
				x=pop();
				postfix[index++]=x;
			}
			push(ch);
			break;
			case '-':
			if(stack[top]=='*'||stack[top]=='/'||stack[top]=='^')
			{
				x=pop();
				postfix[index++]=x;
			}
			push(ch);
			break;
			case '*':
			if(stack[top]=='^')
			{
				char x;
				x=pop();
				postfix[index++]=x;
			}
			push(ch);
			break;
			case '/':
			if(stack[top]=='^')
			{
				x=pop();
				postfix[index++]=x;
			}
			push(ch);
			break;
			case '^':
			push(ch);
			break;
			case '(':
			push(ch);
			break;
			case ')':
			x=pop();
			while(x!='(')
			{
				postfix[index++]=x;
				x=pop();
			}
			break;
			default:postfix[index++]=ch;
		}
	}
	for(i=top;i>=-1;i--)
	{
		x=pop();
		postfix[index++]=x;
	}
}
void main()
{
	clrscr();
	printf("\nenter infix expression : ");
	gets(infix);
	printf("\nthe postfix form of the expression : \n");
	infixtopostfix(infix);
	puts(postfix);
	getch();
}





Q4. Write a program for Expression Evaluation using Stack.

Program:
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
#include<ctype.h>
#define max 10
char postfix[20];
int s[max];
int top=-1;
int infix[20];
void push(int x)
{
	top++;
	s[top]=x;
}
int pop()
{
	int m;
	m=s[top];
	top--;
	return m;
}
void evalpostfix(char ch)
{
	int z,x,y;
	switch(ch)
	{
		case '+':
		x=pop();
		y=pop();
		z=y+x;
		push(z);
		break;
		case '-':
		x=pop();
		y=pop();
		z=y-x;
		push(z);
		break;
		case '*':
		x=pop();
		y=pop();
		z=y*x;
		push(z);
		break;
		case '/':
		x=pop();
		y=pop();
		z=y/x;
		push(z);
		break;
		case '^':
		x=pop();
		y=pop();
		z=pow(y,x);
		break;
	}
}
int main()
{
	char ch;
	int ans;
	printf("\nenter the postfix expression : ");
	while(ch=getchar()!=’\n’)
	{
	    if(isdigit(ch))
	    {
	        push(ch-48);
	    }
	    else
	    {
	        evalpostfix(ch);
	    }
	}
	ans=pop();
	printf("\nthe answer is : %d",ans);
	return 0;
}




Q5. Implement stack as an ADT. Use this ADT to perform expression conversion (Infix – Prefix).

Program:
# include<stdio.h>
# include<string.h>
char prefix[50];
char infix[50];
char opstack[50];
int j, top = 0;
void insert_beg(char ch)
{
    int k;
    if(j == 0)
    prefix[0] = ch;
    else
    {
        for(k = j + 1; k > 0; k--)
        prefix[k] = prefix[k - 1];
        prefix[0] = ch;
    } 
    j++;
}
int lesspriority(char op, char op_at_stack)
{
    int k;
    int pv1; 
    int pv2; 
    char operators[] = {'+', '-', '*', '/', '%', '^', ')'};
    int priority_value[] = {0, 0, 1, 1, 2, 3, 4};
    if(op_at_stack == ')' )
    return 0;
    for(k = 0; k < 6; k ++)
    {
        if(op == operators[k])
        pv1 = priority_value[k];
    }
    for(k = 0; k < 6; k ++)
    {
        if( op_at_stack == operators[k] )
        pv2 = priority_value[k];
    }
    if(pv1 < pv2)
    return 1;
    else
    return 0;
}
void push(char op) 
{
    if(top == 0)
    {
        opstack[top] = op;
        top++;
    }
    else
    {
        if(op != ')')
        { 
            while(lesspriority(op, opstack[top-1]) == 1 && top > 0)
            {
                insert_beg(opstack[--top]);
            }
        }
        opstack[top] = op; 
        top++;
    }
}
void pop()
{
    while(opstack[--top] != ')') 
    insert_beg(opstack[top]);
}
void main()
{
    char ch;
    int l, i = 0;
    printf("\n Enter Infix Expression : ");	
    gets(infix);
    l = strlen(infix);
    while(l > 0)
    {
        ch = infix[--l];
        switch(ch)
        {
            case ' ' : break;
            case ')' :
            case '+' :
            case '-' :
            case '*' :
            case '/' :
            case '^' :
            case '%' :
                push(ch); 
                break;
            case '(' :
                pop();
                break;
            default :
                insert_beg(ch);
        }
    }
    while(top > 0)
    {
        insert_beg( opstack[--top] );
        j++;
    }
    prefix[j] = '\0';
    printf("\nInfix Expression : %s ", infix);
    printf("\nPrefix Expression : %s ", prefix);
 }





Q6. Implement circular queue using arrays.

Program:

#include<stdio.h>
#include<stdlib.h>
struct Node
{
    int data;
    struct Node *next;
}*front=NULL,*rear=NULL;
void enqueue()
{
    struct Node *newnode;
    newnode=(struct Node *)malloc(sizeof(struct Node));
    printf("\nenter data : ");
    scanf("%d",&newnode->data);
    newnode->next=NULL;
    if(front==NULL)
    {
        front=newnode;
        rear=newnode;
    }
    else
    {
        rear->next=newnode;
        rear=newnode;
    }
}
int dequeue()
{
    struct Node *temp;
    int val;
    temp=front;
    val=temp->data;
    front=temp->next;
    free(temp);
    return val;
}
void display()
{
    struct Node *temp;
    temp=front;
    while(temp!=NULL)
    {
        printf("%d -> ",temp->data);
        temp=temp->next;
    }
    printf("NULL\n");
}
int main()
{
    int ch;
    printf("\n1.enqueue element in the queue");
    printf("\n2.dequeue element from the queue");
    printf("\n3.display the queue");
    do
    {
        printf("\nenter your choice : ");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: enqueue();
                    break;
            case 2: dequeue();
                    break;
            case 3: display();
                    break;
            default: printf("\ninvalid choice");
        }
    }while(ch!=0);
    return 0;
}




Q7. Implement job scheduling algorithm using queue.

Program:

#include<stdio.h>
void main()
{
    int i,NOP,sum=0,count=0,y,quant,wt=0,tat=0,at[10],bt[10],temp[10];
    float avg_wt, avg_tat;
    printf("\ntotal number of process in the system : ");
    scanf("%d", &NOP);
    y = NOP;
    for(i=0; i<NOP; i++)
    {
        printf("\nenter arrival time and burst time of process[%d]", i+1);
        printf("\narrival time is : ");
        scanf("%d", &at[i]);
        printf("\nburst time is : ");
        scanf("%d", &bt[i]);
        temp[i] = bt[i];
    }
    printf("\nenter time quantumn for the process : ");
    scanf("%d", &quant);
    printf("\n Process No \t\t Burst Time \t\t TAT \t\t Waiting Time ");
    for(sum=0, i = 0; y!=0; )
    {
        if(temp[i] <= quant && temp[i] > 0)
        {
           sum = sum + temp[i];
           temp[i] = 0;
           count=1;
        }
        else if(temp[i] > 0)
        {
            temp[i] = temp[i] - quant;
            sum = sum + quant;
        }
        if(temp[i]==0 && count==1)
        {
            y--;
            printf("\nProcess No[%d] \t\t \t%d\t\t\t\t %d\t\t\t\t%d", i+1, bt[i], sum-at[i],sum-at[i]-bt[i]);
            wt = wt+sum-at[i]-bt[i];
            tat = tat+sum-
            at[i];
            count =0;
        }
        if(i==NOP-1)
        {
            i=0;
        }
        else if(at[i+1]<=sum)
        {
            i++;
        }
        else
        {
            i=0;
        }
    }
    avg_wt=wt*1.0/NOP;
    avg_tat=tat*1.0/NOP;
    printf("\naverage turn around time : \t%f",avg_wt); 
    printf("\naverage waiting time : \t%f",avg_tat);
}




