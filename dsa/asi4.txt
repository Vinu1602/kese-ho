Question 1 : Create binary tree and perform recursive traversals.
Program :
#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
 int data;
 struct node *left;
 struct node *right;
}node;
node *create()
{
 node *p;
 int x;
 printf("Enter data(-1 for no data):");
 scanf("%d",&x);
 if(x==-1)
 return NULL;
 p=(node*)malloc(sizeof(node));
 p->data=x;
 printf("Enter left child of %d:\n",x);
 p->left=create();
 printf("Enter right child of %d:\n",x);
 p->right=create();
 return p;
}
void preorder(node *t)
{
 if(t!=NULL)
 {
 printf("\n%d",t->data);
 preorder(t->left);
 preorder(t->right);
 }
}
int main()
{
 node *root;
 root=create();
 printf("\nThe preorder traversal of tree is:\n");
 preorder(root);
 return 0;
}




Question 2 : Create binary tree. Find height of the tree and print
leaf nodes. Find mirror image, print original and mirror image using
level-wise printing.
Program :
#include <stdio.h>
#include <stdlib.h>
struct node
{
 int info;
 struct node* left, *right;
};
struct node* createnode(int key)
{
 struct node* newnode = (struct node*)malloc(sizeof(struct node));
 newnode->info = key;
 newnode->left = NULL;
 newnode->right = NULL;
 return(newnode);
}
void mirrorimage(struct node* root)
{
 if (root != NULL)
 {
 struct node* temp;
 mirrorimage(root->left);
 mirrorimage(root->right);
 temp = root->left;
 root->left = root->right;
 root->right = temp;
 }
}
int heightoftree(struct node* root)
{
 int max;
 if (root!=NULL)
 {
 int leftsubtree = heightoftree(root->left);
 int rightsubtree = heightoftree(root->right);
 if (leftsubtree > rightsubtree)
 {
 max = leftsubtree + 1;
 return max;
 }
 else
 {
 max = rightsubtree + 1;
 return max;
 }
 }
}
void currentlevel(struct node* root, int level)
{
 if (root != NULL)
 {
 if (level == 1)
 {
 printf("%d ", root->info);
 }
 else if (level > 1)
 {
 currentlevel(root->left, level-1);
 currentlevel(root->right, level-1);
 }
 }
}
int main()
{
 struct node *newnode = createnode(25);
 newnode->left = createnode(27);
 newnode->right = createnode(19);
 newnode->left->left = createnode(17);
 newnode->left->right = createnode(91);
 newnode->right->left = createnode(13);
 newnode->right->right = createnode(55);
 printf("Level Order Traversal of Tree before creating its mirror image is : \n");
 int i;
 int height = heightoftree(newnode);
 for(i = 1; i <= height; i++)
 {
 currentlevel(newnode,i);
 }
 printf("\n\nLevel Order Traversal of Tree after creating its mirror image is : \n");
 height = heightoftree(newnode);
 mirrorimage(newnode);
 for(i = 1; i <= height; i++)
 {
 currentlevel(newnode,i);
 }
}





