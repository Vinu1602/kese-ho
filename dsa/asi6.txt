Question 1 : Write a program to implement Merge sort method.
Program :
#include <stdio.h>
void merge(int arr[], int p, int q, int r)
{
 int n1 = q - p + 1;
 int n2 = r - q;

 int L[n1], M[n2];

 for (int i = 0; i < n1; i++)
 	L[i] = arr[p + i];
for (int j = 0; j < n2; j++)
	M[j] = arr[q + 1 + j];
int i, j, k;
i = 0;
j = 0;
k = p;
while (i < n1 && j < n2)
{
	if (L[i] <= M[j])
 	{
 		arr[k] = L[i];
 		i++;
 	}
 	else
 	{
 		arr[k] = M[j];
 		j++;
 	}
 	k++;
}

while (i < n1)
{
	arr[k] = L[i];
 	i++;
 	k++;
}
while (j < n2)
{
	arr[k] = M[j];
 	j++;
 	k++;
}
}
void mergeSort(int arr[], int l, int r)
{
 if (l < r)
 {
 int m = l + (r - l) / 2;

 mergeSort(arr, l, m);
 mergeSort(arr, m + 1, r);

 merge(arr, l, m, r);
 }
}
void printArray(int arr[], int size)
{
 for (int i = 0; i < size; i++)
 printf("%d ", arr[i]);
 printf("\n");
}
int main()
{
 int arr[] = {6, 5, 12, 10, 9, 1};
 int size = sizeof(arr) / sizeof(arr[0]);

 mergeSort(arr, 0, size - 1);

 printf("Sorted array: \n");
 printArray(arr, size);
}







Question 2 : Write a program to implement Bubble sort method.
Program :
#include <stdio.h>
void bubbleSort(int array[], int size)
{
 for (int step = 0; step < size - 1; ++step)
 {
 for (int i = 0; i < size - step - 1; ++i)
 {
 if (array[i] > array[i + 1])
 {
 int temp = array[i];
 array[i] = array[i + 1];
 array[i + 1] = temp;
 }
 }
 }
}
void printArray(int array[], int size)
{
 for (int i = 0; i < size; ++i)
 {
 printf("%d ", array[i]);
 }
 printf("\n");
}
int main()
{
 int data[] = {-2, 45, 0, 11, -9};
 int size = sizeof(data) / sizeof(data[0]);
 printf("\n The original array is : \n");
 printArray(data,size);
 bubbleSort(data, size);
 printf("Sorted Array is :\n");
 printArray(data, size);
}





Question 3 : Write a program to implement Fibonacci Search.
#include <stdio.h>
#include <string.h>
int fibsearch(int a[], int n, long x)
{
 int inf = 0, pos, k;
 static int kk= -1, nn = -1;
 static int fib[]={0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 98,
 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811,
 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817,
 39088169, 63245986, 102334155, 165580141};
 if (nn != n)
 {
 k = 0;
 while (fib[k] < n)
 k++;
 kk = k;
 nn = n;
 }
 else
 k = kk;
 while (k > 0)
 {
 pos = inf + fib[--k];
 if ((pos >= n) || (x < a[pos]));
 else if (x > a[pos])
 {
 inf = pos + 1;
 k--;
 }
 else
 {
 return pos+1;
 }
 }
 return 0;
}
void main()
{
 int arr[] = {2, 3 , 45, 56 ,67 ,78 , 89, 99, 100, 101};
 int num, pos;
 printf("\n The array is : \n");
 for(int i = 0; i < 10; i++)
 {
 printf("%d,",arr[i]);
 }
 printf("\nEnter an element to searched : ");
 scanf("%d", &num);
 pos = fibsearch(arr, 10, num);
 if ( pos >= 0)
 printf("\nElement is at %d position!", fibsearch(arr, 10, num));
 else
 printf("\nElement NOT found!! ");
}




Question 4 : Write a program to implement Heap sort method.
Program :
#include <stdio.h>
void swap(int *a, int *b)
{
 int temp = *a;
 *a = *b;
 *b = temp;
}

void heapify(int arr[], int n, int i)
{
 int largest = i;
 int left = 2 * i + 1;
 int right = 2 * i + 2;

 if (left < n && arr[left] > arr[largest])
 largest = left;

 if (right < n && arr[right] > arr[largest])
 largest = right;

 if (largest != i)
 {
 swap(&arr[i], &arr[largest]);
 heapify(arr, n, largest);
 }
}

void heapSort(int arr[], int n)
{
 for (int i = n / 2 - 1; i >= 0; i--)
 heapify(arr, n, i);

 for (int i = n - 1; i >= 0; i--)
 {
 swap(&arr[0], &arr[i]);
 heapify(arr, i, 0);
 }
}

void printArray(int arr[], int n)
{
 for (int i = 0; i < n; ++i)
 printf("%d ", arr[i]);
 printf("\n");
}

int main()
{
 int arr[] = {1, 12, 9, 5, 6, 10};
 int n = sizeof(arr) / sizeof(arr[0]);

 printf("\n Array is : \n");
 printArray(arr,n);

 heapSort(arr, n);

 printf("Sorted array is \n");
 printArray(arr, n);
}

