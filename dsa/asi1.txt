Q1. Write a program to find mean of n numbers using arrays.

Program:

#include<stdio.h>
#include<conio.h>
int main()
{
    clrscr();
    int i,sum=0;
    float avg;
    int arr[10] = {5,6,5,4,10};
    for(i=0;i<10;i++)
    {
        sum = sum+arr[i];
    }
    avg = sum/5;
    printf("average = %f ",avg);
    getch();
    return 0;
}



Q2. Write a program to interchange the smallest & largest no of n numbers using arrays.

Program:

#include<stdio.h>
int main()
{
    int  a[20], b[20], n, sml=0, lar=0, i, spos, lpos, temp ;
    printf("enter the nos of terms: ") ;
    scanf("%d",&n) ;
    printf("\nenter %d terms : \n",n) ;
    for (i = 1; i<=n; i++)
    {
        scanf("%d",&a[i]) ;
        b[i] = a[i] ;
    }
    sml = a[1] ;
    for (i = 1; i<=n; i++)
    {   
        if (a[i] <= sml)
        {
            sml = a[i] ;
            spos = i ;
        }
        if ( lar <= a[i] )
        {
            lar = a[i] ;
            lpos = i ;
        }
    }
    temp = a[spos] ;
    a[spos] = a[lpos] ;
    a[lpos] = temp ;
    printf("\nThe Array entered by user are :\n") ;
    for (i =1; i<=n; i++)
    printf("%d\t",b[i]) ;
    printf("\nThe Array after interchanging the largest and smallest element :\n") ;
    for (i=1; i<=n; i++)
    printf("%d\t",a[i]) ;
    return 0;
}




Q3. Write a program to delete a no from an array which is already sorted in ascending order.

Program:

#include<stdio.h>
int main()
{
    int i, n, pos, num;
    printf("Enter the size of array : ");
    scanf("%d",&n);
    int arr[n];
    printf("Enter the elements of the array : ");
    for (i = 0; i < n; i++)
    {
        scanf("%d",&arr[i]);
    }
    printf("Enter the element to be deleted : ");
    scanf("%d",&num);
    pos = -1;
    for (i = 0; i < n; i++) 
    {
        if (arr[i] == num) 
        {
            pos = i;
            break;
        }
    }
    if (pos == -1) 
    {
        printf("%d is not present",num);
    }
    else
    {
        for (i = pos; i < n-1; i++)
        {
            arr[i] = arr[i + 1];
        }
        printf("\nThe new array is : ");
        for (i = 0; i < n - 1; i++)
        {
            printf("%d ", arr[i]);
        }
    }
    return 0;
}




Q4. Write a program to read and display a 3*3 matrix.

Program:

#include<stdio.h>
void main()
{
    int arr[3][3],i,j;
    printf("\nenter elements in 3 x 3 matrix : \n");
    for(i=1;i<=3;i++)
    {
        for(j=1;j<=3;j++)
        {
            scanf("%d",&arr[i][j]);
        }
    }
    printf("\nentered matrix : \n");
    for(i=1;i<=3;i++)
    {
        for(j=1;j<=3;j++)
        {
            printf("%d ",arr[i][j]);
        }
        printf("\n");
    }
}





Q5. Write a program to find transpose of a given matrix.

Program:

#include<stdio.h>
void main()
{
    int arr[3][3],temp[3][3],i,j;
    printf("\nenter elements in 3 x 3 matrix : \n");
    for(i=1;i<=3;i++)
    {
        for(j=1;j<=3;j++)
        {
            scanf("%d",&arr[i][j]);
        }
    }
    printf("\nentered matrix : \n");
    for(i=1;i<=3;i++)
    {
        for(j=1;j<=3;j++)
        {
            printf("%d ",arr[i][j]);
        }
        printf("\n");
    }
    printf("\ntranspose of matrix : \n");
    for(i=1;i<=3;i++)
    {
        for(j=1;j<=3;j++)
        {
            temp[j][i]=arr[i][j];
        }
    }
    for(i=1;i<=3;i++)
    {
        for(j=1;j<=3;j++)
        {
            printf("%d ",temp[i][j]);
        }
        printf("\n");
    }
}





Q6. Write a program to perform transpose of a sparse matrix.

Program:

#include<stdio.h>
#include<conio.h>
#define MAX 20
void printsparse(int[][3]);
void readsparse(int[][3]);
void transpose(int[][3],int[][3]);
int main()
{
    clrscr();
    int b1[MAX][3],b2[MAX][3],m,n;
    printf("\nenter the number of rows and cols :\n");
    scanf("%d%d",&m,&n);
    b1[0][0]=m;
    b1[0][1]=n;
    readsparse(b1);
    transpose(b1,b2);
    printsparse(b2);
    getch();
    return 0;
}
void readsparse(int b[MAX][3])
{
    int i,t;
    printf("\nenter nos. of non-zero elements :\n");
    scanf("%d",&t);
    b[0][2]=t;
    for(i=1;i<=t;i++)
    {   
        printf("\nenter the row, col ,val : \n");
        scanf("%d%d%d",&b[i][0],&b[i][1],&b[i][2]);
    }
}
 
void printsparse(int b[MAX][3])
{
    int i,n;
    n=b[0][2]; 
    printf("\nafter sparse transpose :\n");
    printf("\nrow\t\tcolumn\t\tvalue\n");
    for(i=0;i<=n;i++)
    printf("%d\t\t\t%d\t\t\t%d\n",b[i][0],b[i][1],b[i][2]);
}
void transpose(int b1[][3],int b2[][3])
{
    int i,j,k,n;
    b2[0][0]=b1[0][1];
    b2[0][1]=b1[0][0];
    b2[0][2]=b1[0][2];
    k=1;
    n=b1[0][2];
    for(i=0;i<b1[0][1];i++)
    for(j=1;j<=n;j++)
    if(i==b1[j][1])
    {
        b2[k][0]=i;
        b2[k][1]=b1[j][0];  
        b2[k][2]=b1[j][2];
        k++;
    }
}





Q7. Write a program to perform addition of two sparse matrices.

Program:

#include<stdio.h>
int main()
{
    int i,j,a[3][3];
    int transpose1[3][3],ct=0;
    int a2[3][3],su[10][10];
    int transpose2[3][3],ct2=0;
    printf("\nenter 3 x 3 matrix 1 elements : \n");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
    printf("\nentered 3 x 3 matrix 1 : \n");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            printf("%d ",a[i][j]);
        }
        printf("\n");
    }
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            transpose1[j][i]=a[i][j];
        }
    }
    printf("\ntranspose of entered matrix 1 : \n");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            printf("%d ",transpose1[i][j]);
        }
        printf("\n");
    }
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            if(a[i][j]!=0)
            {
                ct++;
            }
        }
    }
    printf("\nnon zero elements in second matrix : %d\n",ct2);
    int b[ct2][3];
    int k=0;
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            if(a[i][j]!=0)
            {
                b[k][0]=i;
                b[k][1]=j;
                b[k][2]=a[i][j];
                k++;
            }
        }
    }
    printf("\nsparse matrix 1 : ");
    printf("\nrow    col     data\n");
    for (int i=0; i<ct; i++)
    {
        for (int j=0; j<3; j++)
        {
            printf("%d\t\t",a[i][j]);
        }
        printf("\n");
    }
    printf("\nenter 3 x 3 matrix 2 elements : \n");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            scanf("%d",&a2[i][j]);
        }
    }
    printf("\nentered 3 x 3 matrix 2 : \n");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            printf("%d ",a2[i][j]);
        }
        printf("\n");
    }
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            transpose2[j][i]=a2[i][j];
        }
    }
    printf("\ntranspose of entered matrix 2 : \n");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            printf("%d ",transpose2[i][j]);
        }
        printf("\n");
    }
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            if(a2[i][j]!=0)
            {
                ct2++;
            }
        }
    }
    printf("\nnon zero elements in second matrix : %d\n",ct);
    int b2[ct][3];
    int l=0;
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            if(a[i][j]!=0)
            {
                b2[l][0]=i;
                b2[l][1]=j;
                b2[l][2]=a[i][j];
                l++;
            }
        }
    }
    printf("\nsparse matrix 2 : ");
    printf("\nrow    col     data\n");
    for (int i=0; i<ct; i++)
    {
        for (int j=0; j<3; j++)
        {
            printf("%d\t\t",b2[i][j]);
        }
        printf("\n");
    }
    printf("\naddition of two sparse matrix : \n");
    for(i=0;i<ct;i++)
    {
        for(j=0;j<3;j++)
        {
            su[i][j]=a[i][j]+b2[i][j];
        }
    }
    printf("\nrow    col     data\n");
    for(i=0;i<ct;i++)
    {
        for(j=0;j<3;j++)
        {
            printf("%d\t\t",su[i][j]);
        }
        printf("\n");
    }
    return 0;
}





Q8. Write a program to perform addition of a two polynomial expressions using arrays.

Program:

#include<stdio.h>
int main()
{
    int a[10],b[10],c[10],m,n,k,k1,i,j,x;
    printf("\nenter the no. of terms of the polynomial :\n");
    scanf("%d", &m);
    printf("\nenter the degrees and coefficients :\n");
    for(i=0;i<2*m;i++)
    scanf("%d", &a[i]);
    printf("\nfirst polynomial is :");
    k1=0;
    if(a[k1+1]==1)
    {
       printf("x^%d", a[k1]); 
    }
    else
    printf("%dx^%d", a[k1+1],a[k1]);
    k1+=2;
    while (k1<i)
    {
        printf("+%dx^%d", a[k1+1],a[k1]);
        k1+=2;
    }
    printf("\nenter the no. of terms of 2nd polynomial :\n");
    scanf("%d", &n);
    printf("\nenter the degrees and co-efficients :\n");
    for(j=0;j<2*n;j++)
    scanf("%d", &b[j]);
    printf("\nsecond polynomial is:");
    k1=0;   
    if(b[k1+1]==1)
    {
        printf("x^%d", b[k1]);
    }
    else
    printf("%dx^%d",b[k1+1],b[k1]);
    k1+=2;
    while (k1<2*n)
    {
        printf("+%dx^%d", b[k1+1],b[k1]);
        k1+=2;
    }
    i=0;
    j=0;
    k=0;
    while (m>0 && n>0)
    {
       if (a[i]==b[j])
       {
            c[k+1]=a[i+1]+b[j+1];
            c[k]=a[i];
            m--;
            n--;
            i+=2;
            j+=2;
        }   
        else if (a[i]>b[j])
        {
            c[k+1]=a[i+1];
            c[k]=a[i];
            m--;
            i+=2;
        }
        else
        {
            c[k+1]=b[j+1];
            c[k]=b[j];
            n--;
            j+=2;
        }
        k+=2;
    }    
    while(m>0)
    {
        c[k+1]=a[i+1];
        c[k]=a[i];
        k+=2;
        i+=2;
        m--;
    } 
    while(n>0)
    {
        c[k+1]=b[j+1];
        c[k]=b[j];  
        k+=2;
        j+=2;
        n--;
    }
    printf("\nsum of the two polynomials is : \n");
    k1=0;
    if(c[k1+1]==1)
    {
        printf("x^%d", c[k1]);
    }
    else
    printf("%dx^%d", c[k1+1],c[k1]);
    k1+=2;
    while (k1<k)
    {
        if (c[k1+1]==1)
        printf("+x^%d", c[k1]);
        else
        printf("+%dx^%d", c[k1+1], c[k1]);
        k1+=2;
    }
    return 0;
}
